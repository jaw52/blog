<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ant使用</title>
    <link href="/blog/2022/05/07/Ant%E4%BD%BF%E7%94%A8/"/>
    <url>/blog/2022/05/07/Ant%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Ant-v3-0"><a href="#Ant-v3-0" class="headerlink" title="Ant v3.0"></a>Ant v3.0</h1><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><h3 id="只在提交时做验证"><a href="#只在提交时做验证" class="headerlink" title="只在提交时做验证"></a>只在提交时做验证</h3><p>有时候我们只需要在提交时验证表单，不需要在每一步都验证表单时可以如下设置</p><p><code>this.props.form</code> 提供的 API中<code>setFields</code>，用来设置一组输入控件的值与错误状态</p><p>在<code>onSubmit</code>提交前验证一下表单，并且<code>setFields</code>设置错误信息就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs js">onSubmit = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    e.<span class="hljs-title function_">preventDefault</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">form</span>.<span class="hljs-title function_">validateFields</span>(<span class="hljs-function">(<span class="hljs-params">error, values</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!error) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ok&#x27;</span>, values);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-comment">// server validate</span><br>          <span class="hljs-keyword">if</span> (values.<span class="hljs-property">user</span> === <span class="hljs-string">&#x27;yiminghe&#x27;</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">form</span>.<span class="hljs-title function_">setFields</span>(&#123;<br>              <span class="hljs-attr">user</span>: &#123;<br>                <span class="hljs-attr">value</span>: values.<span class="hljs-property">user</span>,<br>                <span class="hljs-attr">errors</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;forbid ha&#x27;</span>)],<br>              &#125;,<br>            &#125;);<br>          &#125;<br>        &#125;, <span class="hljs-number">500</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>, error, values);<br>      &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ant</tag>
      
      <tag>第三方库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dumi</title>
    <link href="/blog/2022/05/07/Dumi%E5%8F%91%E5%B8%83/"/>
    <url>/blog/2022/05/07/Dumi%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Dumi发布"><a href="#Dumi发布" class="headerlink" title="Dumi发布"></a>Dumi发布</h1><h2 id="初始化项目（dumi忽略）"><a href="#初始化项目（dumi忽略）" class="headerlink" title="初始化项目（dumi忽略）"></a>初始化项目（dumi忽略）</h2><p>首先在创建好的项目文件夹下面执行</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm init<br><br></code></pre></td></tr></table></figure><p>根据对应提示完成<code>package.json</code>文件初始化</p><ul><li><p><strong>package name</strong> 为你创建的npm包的名称，在发布后被安装使用即该名字，npm规定包名首字母需要为小写。如<code>import App from &#39;your-module&#39;;</code></p></li><li><p><strong>version</strong> 即为包版本。语义化版本号分为三位<code>0.0.0</code>。<strong>主版本号</strong>：当进行了大都改动或者对api有很多不兼容修改时应该进行版本号升级。<strong>次版本号</strong>：增加了部分特性或者优化时升级该版本。<strong>修订号</strong>：当修改了项目bug或者小的改动时升级该版本。</p></li><li><p><strong>entry point</strong> 项目的入口路径，当用户使用包的时候，会根据该入口也就是<code>package.json</code>的<strong>main</strong>中的路径来进行索引</p></li><li><p><strong>git repository</strong> 关联的git仓库</p></li><li><p><strong>keywords</strong> 会在npm中展示你的项目关键字</p></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="/blog/img/image_gCzkz_rJtT.png"></p><p>我们需要发布的文件，在demo中的引入可以直接写成包名，duim会自动构建</p><h2 id="设置忽略项"><a href="#设置忽略项" class="headerlink" title="设置忽略项"></a>设置忽略项</h2><p>我们不需要把所有文件或目录提交到npm包，可以看到antd发布的包仅包含了其中几项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;files&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>       <span class="hljs-string">&quot;dist&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;lib&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>如上配置，就只有<code>dist</code>和<code>lib</code>目录会被发布出去，不过，有些文件是npm不会忽略的，有些文件是npm一定会忽略的</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span> 不会被npm忽略的文件<br>package.json<br>README <span class="hljs-params">(and its variants)</span><br>CHANGELOG <span class="hljs-params">(and its variants)</span><br>LICENSE / LICENCE<br><br><span class="hljs-string">//</span> 一定会忽略的<br>node_modules<br>.*<span class="hljs-string">.swp</span><br><span class="hljs-string">._</span>*<br><span class="hljs-string">.DS_Store</span><br><span class="hljs-string">.git</span><br><span class="hljs-string">.hg</span><br><span class="hljs-string">.npmrc</span><br><span class="hljs-string">.lock-wscript</span><br><span class="hljs-string">.svn</span><br><span class="hljs-string">.wafpickle-</span>*<br>config.gypi<br>CVS<br>npm-debug.log<br></code></pre></td></tr></table></figure><h2 id="设置推送源"><a href="#设置推送源" class="headerlink" title="设置推送源"></a>设置推送源</h2><p>新建<code>.npmrc</code>，设置推送到哪个npm源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">registry=http://localhost:4873/<br></code></pre></td></tr></table></figure><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>运行<code>npm publish</code>。对于<code>dumi</code>项目来说，会自动运行<code>prepublishOnly</code>指令进行构建（构建工具是<code>father</code>），构建的产物会推送到设置的npm源。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>发布之后，需要检查一下react版本与目标项目是否匹配，否则可能出现hook之类的冲突</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>umi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dumi</tag>
      
      <tag>umi</tag>
      
      <tag>文档系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dva</title>
    <link href="/blog/2022/05/07/dva/"/>
    <url>/blog/2022/05/07/dva/</url>
    
    <content type="html"><![CDATA[<h1 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h1><h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>dva 通过 <code>model </code>的概念把一个领域的模型管理起来，包含同步更新 <code>state </code>的 <code>reducers</code>，处理异步逻辑的 <code>effects</code>。</p><h4 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h4><p><code>reducers</code> 等同于 <code>redux </code>里的 <code>reducer</code>，接收 <code>action</code>，同步更新 <code>state</code></p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespace</span>: <span class="hljs-string">&#x27;products&#x27;</span>,<br>  <span class="hljs-attr">state</span>: [],<br>  <span class="hljs-attr">reducers</span>: &#123;<br>    <span class="hljs-string">&#x27;delete&#x27;</span>(state, &#123; <span class="hljs-attr">payload</span>: id &#125;) &#123;<br>      <span class="hljs-comment">//state为当前状态值，函数返回最新的状态值</span><br>      <span class="hljs-keyword">return</span> state.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">id</span> !== id);<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p><code>namespace</code> 表示在全局 <code>state </code>上的 <code>key</code>，必须不同</p></li><li><p><code>state</code> 是初始值，<code>Model </code>的状态数据，通常表现为一个 javascript 对象</p></li></ul><h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><p>Effect在我们的应用中，最常见的就是异步操作，<code>Effects</code> 的最终流向是通过 <code>Reducers</code> 改变 <code>State</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">namespace</span>: <span class="hljs-string">&#x27;todos&#x27;</span>,<br>  <span class="hljs-attr">effects</span>: &#123;<br>    *<span class="hljs-title function_">addRemote</span>(<span class="hljs-params">&#123; payload: todo &#125;, &#123; put, call, select &#125;</span>) &#123;<br>      <span class="hljs-comment">// 这边的 state 来源于全局的 state，select 方法提供获取全局 state 的能力，也就是说，在这边如果你有需要其他 model 的数据，则完全可以通过 state.modelName 来获取</span><br>      <span class="hljs-keyword">const</span> todos = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">select</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">todos</span>); <br>      <span class="hljs-comment">//call 用于调用异步逻辑，支持 promise 。</span><br>      <span class="hljs-keyword">yield</span> <span class="hljs-title function_">call</span>(addTodo, todo);<br>      <span class="hljs-comment">//put 用于触发 action 。这边需要注意的是，action 所调用的 reducer 或 effects 来源于本 model 那么在 type 中不需要声明命名空间，如果需要触发其他非本 model 的方法，则需要在 type 中声明命名空间，如 yield put(&#123; type: &#x27;namespace/fuc&#x27;, payload: xxx &#125;);</span><br>      <span class="hljs-keyword">yield</span> <span class="hljs-title function_">put</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-attr">payload</span>: todo &#125;); <br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>Action 是一个普通 javascript 对象，它是改变model中 <code>State </code>的唯一途径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">dispatch</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;user/add&#x27;</span>, <span class="hljs-comment">// 如果在 model 外调用，需要添加 namespace</span><br>  <span class="hljs-attr">payload</span>: &#123;&#125;, <span class="hljs-comment">// 需要传递的信息</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><code>dipatch </code>可以看作是触发这个行为的方式，而 <code>Reducer </code>则是描述如何改变数据的</p><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><p>dva 提供了 <code>connect </code>方法。如果你熟悉 <code>redux</code>，这个 <code>connect </code>就是 <code>react-redux</code> 的 <code>connect </code>。</p><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><p>使用<code>connect</code>连接</p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dva&quot;</span>; <span class="hljs-comment">//从dva中导入connect</span><br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(props)<br>    &#125;  <br>    render ()&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> this.props.example.initText<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> //如这里就获取到了上面定义的initText数据了</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect (<span class="hljs-function">(<span class="hljs-params">&#123;example&#125;</span>)=&gt;</span>(&#123;example&#125;))(<span class="hljs-title class_">Counter</span>) <span class="hljs-comment">//通过这种方式来把model层的数据传递到当前组件了，默认这面的也是example属性，通过this.props.example可以获取到model（example.js）中state的数据了</span><br></code></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dva&quot;</span>; <span class="hljs-comment">//从dva中导入connect</span><br> <br>@<span class="hljs-title function_">connect</span>(<span class="hljs-function">(<span class="hljs-params">&#123;example&#125;</span>)=&gt;</span>(&#123;example&#125;))<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(props)<br>    &#125;  <br>    render ()&#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> this.props.example.initText<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> //如这里就获取到了上面定义的initText数据了</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useSelector, useDispatch，useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;umi&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">//获取dva中products全局存放的state</span><br>   <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">products</span>) <br><br>  <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>()<br>  <br>  <span class="hljs-comment">//改变dva中products全局存放的state</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">deleteHandler</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">id</span>) =&gt; &#123;<br>    <br>    <span class="hljs-title function_">dispatch</span>(&#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;products/delete&#x27;</span>,<br>      <span class="hljs-attr">payload</span>:&#123;id&#125;<br>    &#125;)<br>  &#125;;<br>  <br>  <span class="hljs-comment">//略</span><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/&gt;</span></span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Index</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>umi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>第三方库</tag>
      
      <tag>umi</tag>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git commit</title>
    <link href="/blog/2022/05/07/git%20commit/"/>
    <url>/blog/2022/05/07/git%20commit/</url>
    
    <content type="html"><![CDATA[<p>给大家介绍下如何保障项目 <code>commit message</code> 的规范和格式化</p><span id="more"></span><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>目前规范使用较多的是 <a href="https://link.juejin.cn/?target=https://link.zhihu.com/?target=https://github.com/angular/angular.js/blob/master/DEVELOPERS.md%23-git-commit-guidelines">Angular 团队的规范</a>, 继而衍生了 <a href="https://link.juejin.cn/?target=https://link.zhihu.com/?target=https://conventionalcommits.org/">Conventional Commits specification</a>. 它的 message 格式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">&lt;<span class="hljs-built_in">type</span>&gt;(&lt;scope&gt;): &lt;subject&gt;<br><span class="hljs-comment"># 空行</span><br>&lt;BLANK LINE&gt;<br>&lt;body&gt;<br><span class="hljs-comment"># 空行</span><br>&lt;BLANK LINE&gt;<br>&lt;footer&gt;<br></code></pre></td></tr></table></figure><p>占位标签解析：</p><ul><li><code>type</code>：代表某次提交的类型，比如是修复一个bug还是增加一个新的feature。</li><li><code>scope</code>：commit影响的范围。scope依据项目而定，例如在业务项目中可以依据菜单或者功能模块划分，如果是组件库开发，则可以依据组件划分。如果一次commit修改多个模块，建议拆分成多次commit，以便更好追踪和维护</li><li><code>subject</code>：是commit的简短描述</li><li><code>body</code>：填写详细描述，主要描述改动之前的情况及修改动机，对于小的修改不作要求，但是重大需求、更新等必须添加body来作说明</li><li><code>footer</code>：如果代码的提交是不兼容变更或关闭缺陷，则Footer必需，否则可以省略。</li></ul><p>所有的type类型如下：</p><ul><li>feat[特性]:新增feature </li><li>fix[修复]: 修复bug     </li><li>docs[文档]: 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</li><li>style[格式]: 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑</li><li>refactor[重构]: 代码重构，没有加新功能或者修复bug</li><li>perf[优化]: 优化相关，比如提升性能、体验</li><li>test[测试]: 测试用例，包括单元测试、集成测试等</li><li>chore[工具]: 改变构建流程、或者增加依赖库、工具等</li><li>revert[回滚]: 回滚到上一个版本</li></ul><h1 id="格式化工具"><a href="#格式化工具" class="headerlink" title="格式化工具"></a>格式化工具</h1><h3 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h3><p><code>commitizen/cz-cli</code>, 我们需要借助它提供的 git cz 命令替代我们的 git commit 命令, 帮助我们生成符合规范的 commit message.</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>首先，全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g commitizen<br></code></pre></td></tr></table></figure><p>package.json中配置:</p><p>其中需要注意的是需要先手动<code>git add</code>更改文件，否则直接运行<code>git cz</code>会提示没有效果的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;script&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;commit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;git add . &amp;&amp; git cz&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;commitizen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cz-conventional-changelog&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>在对应的项目中执行 <code>git cz</code> or<code> npm run commit</code></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/5/16/16369a14ec8704fc~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>根据提示依次填写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.Select the <span class="hljs-built_in">type</span> of change that you<span class="hljs-string">&#x27;re committing 选择改动类型 (&lt;type&gt;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">2.What is the scope of this change (e.g. component or file name)? 填写改动范围 (&lt;scope&gt;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">3.Write a short, imperative tense description of the change: 写一个精简的描述 (&lt;subject&gt;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">4.Provide a longer description of the change: (press enter to skip) 对于改动写一段长描述 (&lt;body&gt;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">5.Are there any breaking changes? (y/n) 是破坏性修改吗？默认n (&lt;footer&gt;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">6.Does this change affect any openreve issues? (y/n) 改动修复了哪个问题？默认n (&lt;footer&gt;)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h3 id="webstorm"><a href="#webstorm" class="headerlink" title="webstorm"></a>webstorm</h3><p>webstorm本身就集成了一个图形化的git提交系统，为了方便我们可以下载一个<code>Git Commit Template</code>的插件，可以帮助我们提交格式化的信息</p><h1 id="校验你的-message"><a href="#校验你的-message" class="headerlink" title="校验你的 message"></a>校验你的 message</h1><p><code>commitlint</code>: 可以帮助我们 lint commit messages, 如果我们提交的不符合指向的规范, 直接拒绝提交</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D @commitlint/config-conventional @commitlint/cli<br></code></pre></td></tr></table></figure><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>同时需要在项目目录下创建配置文件 <code>.commitlintrc.js</code>, 写入:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">extends</span>: [<br>    <span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span><br>  ]<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>在<code>gitHooks</code>增加配置，提交时便可检查提交信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//package.json</span><br><span class="hljs-attr">&quot;gitHooks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;commit-msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commitlint -e $GIT_PARAMS&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="自定义Type"><a href="#自定义Type" class="headerlink" title="自定义Type"></a>自定义Type</h3><p>以上会启用推荐配置，针对于前端项目，<code>type</code>可能不够，需要另外扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">rules</span>: &#123;<br><span class="hljs-string">&#x27;type-enum&#x27;</span>: [<br><span class="hljs-number">2</span>,<br><span class="hljs-string">&#x27;always&#x27;</span>,<br>[<br><span class="hljs-string">&#x27;build&#x27;</span>,<br><span class="hljs-string">&#x27;chore&#x27;</span>,<br><span class="hljs-string">&#x27;ci&#x27;</span>,<br><span class="hljs-string">&#x27;docs&#x27;</span>,<br><span class="hljs-string">&#x27;feat&#x27;</span>,<br><span class="hljs-string">&#x27;fix&#x27;</span>,<br><span class="hljs-string">&#x27;perf&#x27;</span>,<br><span class="hljs-string">&#x27;refactor&#x27;</span>,<br><span class="hljs-string">&#x27;revert&#x27;</span>,<br><span class="hljs-string">&#x27;style&#x27;</span>,<br><span class="hljs-string">&#x27;test&#x27;</span>,<br>],<br>],<br>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="type-enum"><a href="#type-enum" class="headerlink" title="type-enum"></a>type-enum</h4><ul><li><p><strong>condition</strong>: 0为<code>disable</code>，1为<code>warning</code>，2为<code>error</code></p></li><li><p><strong>rule</strong>:应用与否，可选<code>always</code>|<code>never</code></p></li></ul><h1 id="自动生成-CHANGELOG"><a href="#自动生成-CHANGELOG" class="headerlink" title="自动生成 CHANGELOG"></a>自动生成 CHANGELOG</h1><p>通过以上工具的帮助, 我们的工程 commit message 应该是符合 Angular团队那套, 这样也便于我们借助 <code>standard-version</code> 这样的工具, 自动生成 <code>CHANGELOG</code>, 甚至是 语义化的版本号(Semantic Version).</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -D standard-version<br></code></pre></td></tr></table></figure><p>package.json 配置，会按默认升级版本号更新<code>version</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scirpt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;release&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;standard-version&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="强制打一个静态版本号"><a href="#强制打一个静态版本号" class="headerlink" title="强制打一个静态版本号"></a>强制打一个静态版本号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-string">&quot;release-static&quot;</span>: <span class="hljs-string">&quot;standard-version --release-as 3.3.3&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第一个版本"><a href="#第一个版本" class="headerlink" title="第一个版本"></a>第一个版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run release -- --first-release<br></code></pre></td></tr></table></figure><h3 id="配置哪些commit消息写入changelog"><a href="#配置哪些commit消息写入changelog" class="headerlink" title="配置哪些commit消息写入changelog"></a>配置哪些commit消息写入changelog</h3><p>默认情况下，*<code>standard-version</code>* 只会在 <em>CHANGELOG.md</em> 中记录 <code>feat</code> 和 <code>fix</code> 类型的提交。如果想记录其他类型的提交，需要如下步骤</p><p>根目录下创建一个名为 <code>.versionrc.js</code> 的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-string">&quot;types&quot;</span>: [<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;feat&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;✨ Features | 新功能&quot;</span> &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;fix&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;🐛 Bug Fixes | Bug 修复&quot;</span> &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;init&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;🎉 Init | 初始化&quot;</span>, <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-literal">true</span>  &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;docs&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;✏️ Documentation | 文档&quot;</span> &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;💄 Styles | 风格&quot;</span> &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;refactor&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;♻️ Code Refactoring | 代码重构&quot;</span> &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;perf&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;⚡ Performance Improvements | 性能优化&quot;</span> &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;✅ Tests | 测试&quot;</span>, <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-literal">true</span>  &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;revert&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;⏪ Revert | 回退&quot;</span>, <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-literal">true</span> &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;📦‍ Build System | 打包构建&quot;</span>, <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-literal">true</span>  &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;chore&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;🚀 Chore | 构建/工程依赖/工具&quot;</span>, <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-literal">true</span>  &#125;,<br>      &#123; <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;ci&quot;</span>, <span class="hljs-string">&quot;section&quot;</span>: <span class="hljs-string">&quot;👷 Continuous Integration | CI 配置&quot;</span>, <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-literal">true</span>  &#125;<br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><code>&quot;type&quot;</code> commit 类型</li><li><code>&quot;section&quot;</code> 不同的 commit 类型所在 <em>CHANGELOG.md</em> 中的区域</li><li><code>&quot;hidden&quot;</code> 是否在 <em>CHANGELOG.md</em> 中显示</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git Hooks</title>
    <link href="/blog/2022/05/07/git%20hooks/"/>
    <url>/blog/2022/05/07/git%20hooks/</url>
    
    <content type="html"><![CDATA[<p><code>git hooks</code>是一些自定义的脚本，对提交的代码和message进行检查，是否符合定义的规范</p><span id="more"></span><h1 id="客户端钩子"><a href="#客户端钩子" class="headerlink" title="客户端钩子"></a>客户端钩子</h1><h4 id="pre-commit（常用）"><a href="#pre-commit（常用）" class="headerlink" title="pre-commit（常用）"></a>pre-commit（常用）</h4><p>在键入提交信息前运行</p><h4 id="commit-msg（常用）"><a href="#commit-msg（常用）" class="headerlink" title="commit-msg（常用）"></a>commit-msg（常用）</h4><p>因此，可以用来在提交通过前验证项目状态或提交信息</p><h1 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h1><p>Husky可以将git内置的钩子暴露出来，很方便地进行钩子命令注入，而不需要在.git&#x2F;hooks目录下自己写shell脚本了。您可以使用它来lint您的提交消息、运行测试、lint代码等。当你<code>commit</code>或<code>push</code>的时候。husky触发所有git钩子脚本。</p><h1 id="yorkie"><a href="#yorkie" class="headerlink" title="yorkie"></a>yorkie</h1><p>fork自husky</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装 yorkie，它会让你在 <code>package.jso</code>n 的<code> gitHooks</code> 字段中方便地指定 Git hook：</p><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;gitHooks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;pre-commit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lint-staged&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;commit-msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fabric verify-commit&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lint-staged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;*.&#123;js,jsx,less,md,json&#125;&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;prettier --write&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;*.ts?(x)&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-string">&quot;prettier --parser=typescript --write&quot;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h1 id="跳过hooks"><a href="#跳过hooks" class="headerlink" title="跳过hooks"></a>跳过hooks</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&#x27;xxx&#x27;</span> --no-verify<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm</title>
    <link href="/blog/2022/05/07/npm/"/>
    <url>/blog/2022/05/07/npm/</url>
    
    <content type="html"><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">//npm查看包的最新版本<br>npm view &lt;packagename&gt; versions --json<br>//指定版本安装<br>npm install &lt;packagename&gt;@3.21.2<br></code></pre></td></tr></table></figure><h3 id="npm-install安装固定版本号以及package-json中版本号详解"><a href="#npm-install安装固定版本号以及package-json中版本号详解" class="headerlink" title="npm install安装固定版本号以及package.json中版本号详解"></a>npm install安装固定版本号以及package.json中版本号详解</h3><p>在npm中安装固定的版本号package，只需要在其后加 ‘@版本号’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install three@0.102.1<br></code></pre></td></tr></table></figure><p>Node.js中package.json中库的版本号详解：</p><ol><li><p>~ 匹配最近的小版本依赖包，比如~1.2.3会匹配所有1.2.x版本，但是不包括1.3.0</p></li><li><p>^ 匹配最新的大版本依赖包，比如^1.2.3会匹配所有1.x.x的包，包括1.3.0，但是不包括2.0.0</p></li><li><p>* 意味着安装最新版本的依赖包</p></li></ol><p>npm i的时候实际是执行以上规则，并不是直接安装有1.2.3，而是按具体符号匹配，有更新则更新。</p><h1 id="nvm指令"><a href="#nvm指令" class="headerlink" title="nvm指令"></a>nvm指令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install stable   //安装最新稳定版 node<br>nvm install &lt;version&gt; //安装指定版本，可模糊安装，如：安装v4.0.0，可nvm install v4.0.0 或者 nvm install 4.4<br>nvm uninstall &lt;version&gt;       //删除已安装的指定版本，语法与install类似<br>nvm use &lt;version&gt;           //切换使用指定的版本node<br>nvm <span class="hljs-built_in">alias</span> default &lt;version&gt;  //可以指定默认打开终端时的node版本<br>nvm <span class="hljs-built_in">ls</span>                             //列出所有安装的版本<br>nvm ls-remote             //列出所有远程服务器的版本（官方node version list）<br>nvm current      //显示当前的版本<br>nvm <span class="hljs-built_in">alias</span> &lt;name&gt; &lt;version&gt;        //给不同的版本号添加别名<br>nvm <span class="hljs-built_in">unalias</span> &lt;name&gt;     //删除已定义的别名<br>nvm reinstall-packages &lt;version&gt;   //在当前版本 node 环境下，重新全局安装指定版本号的 npm 包<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nrm</title>
    <link href="/blog/2022/05/07/nrm/"/>
    <url>/blog/2022/05/07/nrm/</url>
    
    <content type="html"><![CDATA[<p>一般在本地会安装多个npm源，可以使用nrm对其进行管理与切换。</p><span id="more"></span><p>相当于</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm <span class="hljs-built_in">set</span> registry [url]<br></code></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install nrm -g<br></code></pre></td></tr></table></figure><h3 id="增加本地npm源"><a href="#增加本地npm源" class="headerlink" title="增加本地npm源"></a>增加本地npm源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm add &lt;名称&gt; &lt;地址&gt;<br></code></pre></td></tr></table></figure><h3 id="删除npm源"><a href="#删除npm源" class="headerlink" title="删除npm源"></a>删除npm源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm del &lt;名称&gt; &lt;地址&gt;<br></code></pre></td></tr></table></figure><h3 id="查看是否添加成功"><a href="#查看是否添加成功" class="headerlink" title="查看是否添加成功"></a>查看是否添加成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm <span class="hljs-built_in">ls</span><br><br>// 源列表<br><br>- npm -------- [https://registry.npmjs.org/](https://registry.npmjs.org/)<br><br>    yarn ------- [https://registry.yarnpkg.com/](https://registry.yarnpkg.com/)<br><br>    cnpm ------- [http://r.cnpmjs.org/](http://r.cnpmjs.org/)<br><br>    taobao ----- [https://registry.npm.taobao.org/](https://registry.npm.taobao.org/)<br><br>    nj --------- [https://registry.nodejitsu.com/](https://registry.nodejitsu.com/)<br><br>    npmMirror -- [https://skimdb.npmjs.com/registry/](https://skimdb.npmjs.com/registry/)<br><br>    edunpm ----- [http://registry.enpmjs.org/](http://registry.enpmjs.org/)<br><br>    localnpm --- http://*.*.*.*:4873/<br></code></pre></td></tr></table></figure><h3 id="切换至本地源"><a href="#切换至本地源" class="headerlink" title="切换至本地源"></a>切换至本地源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">nrm use &lt;名称&gt;<br><br>// 源列表<br><br>  npm -------- [https://registry.npmjs.org/](https://registry.npmjs.org/)<br><br>  yarn ------- [https://registry.yarnpkg.com/](https://registry.yarnpkg.com/)<br><br>  cnpm ------- [http://r.cnpmjs.org/](http://r.cnpmjs.org/)<br><br>  taobao ----- [https://registry.npm.taobao.org/](https://registry.npm.taobao.org/)<br><br>  nj --------- [https://registry.nodejitsu.com/](https://registry.nodejitsu.com/)<br><br>  npmMirror -- [https://skimdb.npmjs.com/registry/](https://skimdb.npmjs.com/registry/)<br><br>  edunpm ----- [http://registry.enpmjs.org/](http://registry.enpmjs.org/)<br><br>- localnpm --- http://*.*.*.*:4873/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>package.json</title>
    <link href="/blog/2022/05/07/package/"/>
    <url>/blog/2022/05/07/package/</url>
    
    <content type="html"><![CDATA[<h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><h2 id="main字段"><a href="#main字段" class="headerlink" title="main字段"></a>main字段</h2><p><code>main</code>字段指定了加载的入口文件，<code>require</code>导入的时候就会加载这个文件。这个字段的默认值是模块根目录下面的<code>index.js</code></p><h2 id="repository字段"><a href="#repository字段" class="headerlink" title="repository字段"></a>repository字段</h2><p>指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助</p><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;repository&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;url&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://github.com/npm/npm.git&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="dependencies字段-devDependencies字段"><a href="#dependencies字段-devDependencies字段" class="headerlink" title="dependencies字段, devDependencies字段"></a>dependencies字段, devDependencies字段</h2><p><code>dependencies</code>字段指定了项目运行所依赖的模块，<code>devDependencies</code>指定项目开发所需要的模块</p><p>版本说明</p><p>固定版本: 比如<code>5.38.1</code>，安装时只安装指定版本</p><p>波浪号: 比如<code>~5.38.1</code>, 表示安装5.38.x的最新版本</p><p>插入号: 比如<code>ˆ5.38.1</code>, ，表示安装5.x.x的最新版本</p><p>latest: 安装最新版本</p><h2 id="private字段"><a href="#private字段" class="headerlink" title="private字段"></a>private字段</h2><p>如果这个属性被设置为<code>true</code>，<code>npm</code>将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><h2 id="publishConfig字段"><a href="#publishConfig字段" class="headerlink" title="publishConfig字段"></a>publishConfig字段</h2><p>用于设置发布用到的一些值的集合</p><p>通常<code>publishConfig</code>会配合<code>private</code>来使用，如果你只想让模块被发布到一个特定的<code>npm</code>仓库，如一个内部的仓库</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;private&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;publishConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;registry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://registry.npmjs.org/&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;public&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="peerDependencies"><a href="#peerDependencies" class="headerlink" title="peerDependencies"></a>peerDependencies</h2><p><code>peerDependencies</code>的目的是提示宿主环境去安装满足插件<code>peerDependencies</code>所指定依赖的包，然后在插件<code>import</code>所依赖的包的时候，永远都是引用宿主环境统一安装的npm包，最终解决插件与所依赖包不一致的问题</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
      <tag>package.json</tag>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yarn</title>
    <link href="/blog/2022/05/07/yarn/"/>
    <url>/blog/2022/05/07/yarn/</url>
    
    <content type="html"><![CDATA[<h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs js">npm install vue<br>yarn add vue<br></code></pre></td></tr></table></figure><p>安装全局包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g vue<br>yarn <span class="hljs-variable language_">global</span> add vue<br></code></pre></td></tr></table></figure><h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm uninstall vue<br>yarn remove vue<br></code></pre></td></tr></table></figure><p>移除全局包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm uninstall -g vue<br>yarn <span class="hljs-variable language_">global</span> remove vue<br></code></pre></td></tr></table></figure><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm update vue<br>yarn upgrade vue<br></code></pre></td></tr></table></figure><p>升级全局包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">npm update -g vue<br>yarn <span class="hljs-variable language_">global</span> upgrade vue<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>package.json</tag>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/blog/2022/05/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/blog/2022/05/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>正则表达式(Regular Expression)其实就是一门工具，<strong>目的</strong>是为了字符串模式匹配，从而实现搜索和替换功能</p><span id="more"></span><p>大家可以利用<a href="https://link.juejin.cn/?target=https://regexper.com/">regexper.com</a>这个工具很好地可视化自己写的正则表达式</p><h3 id="从字符出发"><a href="#从字符出发" class="headerlink" title="从字符出发"></a>从字符出发</h3><h4 id="单个字符"><a href="#单个字符" class="headerlink" title="单个字符"></a>单个字符</h4><table><thead><tr><th>特殊字符</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>换行符</td><td>\n</td><td><strong>n</strong>ew line</td></tr><tr><td>换页符</td><td>\f</td><td><strong>f</strong>orm feed</td></tr><tr><td>回车符</td><td>\r</td><td><strong>r</strong>eturn</td></tr><tr><td>空白符</td><td>\s</td><td><strong>s</strong>pace</td></tr><tr><td>制表符</td><td>\t</td><td><strong>t</strong>ab</td></tr><tr><td>垂直制表符</td><td>\v</td><td><strong>v</strong>ertical tab</td></tr><tr><td>回退符</td><td>[\b]</td><td><strong>b</strong>ackspace,之所以使用[]符号是避免和\b重复</td></tr></tbody></table><h4 id="多个字符"><a href="#多个字符" class="headerlink" title="多个字符"></a>多个字符</h4><p>在正则表达式里，集合的定义方式是使用中括号<code>[</code>和<code>]</code>。如<code>/[123]/</code>这个正则就能同时匹配1,2,3三个字符。利用<code>/[0-9]/</code>就能匹配所有的数字, <code>/[a-z]/</code>则可以匹配所有的英文小写字母。</p><table><thead><tr><th>匹配区间</th><th>正则表达式</th><th>记忆方式</th></tr></thead><tbody><tr><td>除了换行符之外的任何字符</td><td>.</td><td>句号,除了句子结束符</td></tr><tr><td>单个数字, [0-9]</td><td>\d</td><td><strong>d</strong>igit</td></tr><tr><td>除了[0-9]</td><td>\D</td><td><strong>not</strong> <strong>d</strong>igit</td></tr><tr><td>包括下划线在内的单个字符，[A-Za-z0-9_]</td><td>\w</td><td><strong>w</strong>ord</td></tr><tr><td>非单字字符</td><td>\W</td><td><strong>not</strong> <strong>w</strong>ord</td></tr><tr><td>匹配空白字符,包括空格、制表符、换页符和换行符</td><td>\s</td><td><strong>s</strong>pace</td></tr><tr><td>匹配非空白字符</td><td>\S</td><td><strong>not</strong> <strong>s</strong>pace</td></tr></tbody></table><h3 id="使用-RegExp-对象"><a href="#使用-RegExp-对象" class="headerlink" title="使用 RegExp 对象"></a>使用 RegExp 对象</h3><h4 id="使用-test"><a href="#使用-test" class="headerlink" title="使用 test()"></a>使用 test()</h4><p>如果字符串中含有匹配的文本，则返回 <code>true</code>，否则返回 <code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> patt = <span class="hljs-regexp">/e/</span>;<br>patt.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;The best things in life are free!&quot;</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="使用-exec"><a href="#使用-exec" class="headerlink" title="使用 exec()"></a>使用 exec()</h4><p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">/e/.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&quot;The best things in life are free!&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
